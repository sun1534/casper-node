# ================================
# Configuration options for a node
# ================================
[node]

# Path (absolute, or relative to this config.toml) to the chainspec configuration file.
chainspec_config_path = 'chainspec.toml'

# If set, use this hash as a trust anchor when joining an existing network.
#trusted_hash = 'HEX-FORMATTED BLOCK HASH'


# =================================
# Configuration options for logging
# =================================
[logging]

# Output format.  Possible values are 'text' or 'json'.
format = 'text'

# Colored output.  Has no effect if format = 'json'.
color = false

# Abbreviate module names in text output.  Has no effect if format = 'json'.
abbreviate_modules = false


# ===================================
# Configuration options for consensus
# ===================================
[consensus]

# Path (absolute, or relative to this config.toml) to validator's secret key file used to sign
# consensus messages.
secret_key_path = 'secret_key.pem'


# ====================================
# Configuration options for networking
# ====================================
[network]

# The public address of the node.
#
# It must be publicly available in order to allow peers to connect to this node.
# If the port is set to 0, the actual bound port will be substituted.
public_address = '127.0.0.1:0'

# Address to bind to for listening.
# If port is set to 0, a random port will be used.
bind_address = '0.0.0.0:34553'

# Addresses to connect to in order to join the network.
#
# If not set, this node will not be able to attempt to connect to the network.  Instead it will
# depend upon peers connecting to it.  This is normally only useful for the first node of the
# network.
#
# Multiple addresses can be given and the node will attempt to connect to each, requiring at least
# one connection.
known_addresses = ['127.0.0.1:34553']

# The interval (in milliseconds) between each fresh round of gossiping the node's public address.
gossip_interval = 30000

# Enable systemd support. If enabled, the node will notify systemd once it has synced and its
# listening socket for incoming connections is open.
#
# It is usually better to leave this option off and enable it explicitly via command-line override
# only in the unit files themselves via `-C=network.systemd_support=true`.
systemd_support = false


# =============================================
# Configuration options for the JSON-RPC HTTP server
# =============================================
[rpc_server]

# Listening address for JSON-RPC HTTP server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the JSON-RPC HTTP server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:7777'

# =============================================
# Configuration options for the REST HTTP server
# =============================================
[rest_server]

# Listening address for REST HTTP server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the REST HTTP server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:8888'

# =============================================
# Configuration options for the SSE HTTP event stream server
# =============================================
[event_stream_server]

# Listening address for SSE HTTP event stream server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the SSE HTTP event stream server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:9999'

# The number of event stream events to buffer.
event_stream_buffer_length = 100


# ===============================================
# Configuration options for the storage component
# ===============================================
[storage]

# Path (absolute, or relative to this config.toml) to the folder where any files created
# or read by the storage component will exist.
#
# If the folder doesn't exist, it and any required parents will be created.
#
# If unset, the path must be supplied as an argument via the CLI.
path = '../node-storage'

# Maximum size of the database to use for the block store.
#
# The size should be a multiple of the OS page size.
#
# 483_183_820_800 == 18 GiB.
max_block_store_size = 19_327_352_832

# Maximum size of the database to use for the deploy store.
#
# The size should be a multiple of the OS page size.
#
# 322_122_547_200 == 12 GiB.
max_deploy_store_size = 12_884_901_888

# Maximum size of the database to use for the deploy metadata.
#
# The size should be a multiple of the OS page size.
#
# 322_122_547_200 == 12 GiB.
max_deploy_metadata_store_size = 12_884_901_888

# ===================================
# Configuration options for gossiping
# ===================================
[gossip]

# Target number of peers to infect with a given piece of data.
infection_target = 3

# The saturation limit as a percentage, with a maximum value of 99.  Used as a termination
# condition.
#
# Example: assume the `infection_target` is 3, the `saturation_limit_percent` is 80, and we don't
# manage to newly infect 3 peers.  We will stop gossiping once we know of more than 15 holders
# excluding us since 80% saturation would imply 3 new infections in 15 peers.
saturation_limit_percent = 80

# The maximum duration in seconds for which to keep finished entries.
#
# The longer they are retained, the lower the likelihood of re-gossiping a piece of data.  However,
# the longer they are retained, the larger the list of finished entries can grow.
finished_entry_duration_secs = 3600

# The timeout duration in seconds for a single gossip request, i.e. for a single gossip message
# sent from this node, it will be considered timed out if the expected response from that peer is
# not received within this specified duration.
gossip_request_timeout_secs = 10

# The timeout duration in seconds for retrieving the remaining part(s) of newly-discovered data
# from a peer which gossiped information about that data to this node.
get_remainder_timeout_secs = 5


# ===================================
# Configuration options for fetcher
# ===================================
[fetcher]

# The timeout duration in seconds for a single fetcher request, i.e. for a single fetcher message
# sent from this node to another node, it will be considered timed out if the expected response from that peer is
# not received within this specified duration.
get_from_peer_timeout = 3


# ========================================================
# Configuration options for the contract runtime component
# ========================================================
[contract_runtime]

# Optional setting to use system contracts or not.  If unset, defaults to false.
#use_system_contracts = false

# Optional setting to enable bonding or not.  If unset, defaults to false.
#enable_bonding = false

# Optional maximum size of the database to use for the global state store.
#
# If unset, defaults to 32,212,254,720 == 30 GiB.
#
# The size should be a multiple of the OS page size.
#max_global_state_size = 32_212_254_720
